{
  "code": "import utils from './utils/utils';\r\nimport WindowHistory from \"./views/windowHistory\";\r\nimport WindowGroup from \"./views/WindowGroup\";\r\nimport PointsManager from './manager/PointsManager';\r\nimport Events from \"./events/events\";\r\nimport Canvas from './views/Canvas';\r\nexport default class App {\r\n    constructor() {\r\n        this._groupName = \"\";\r\n        this.preX = 0;\r\n        this.preY = 0;\r\n        this.curX = 0;\r\n        this.curY = 0;\r\n        this._points = [];\r\n        this._strokeID = 0;\r\n        this._strokeColor = \"\";\r\n        this.touchMoveable = true;\r\n        this.hasRecognize = false;\r\n        fgui.UIPackage.loadPackage(\"res/ui/canvas\", Laya.Handler.create(this, this.onUILoaded));\r\n    }\r\n    onUILoaded() {\r\n        this._view = fgui.UIPackage.createObject(\"canvas\", \"Main\").asCom;\r\n        this._view.x = (Laya.Browser.clientWidth - this._view.width) / 2;\r\n        fgui.GRoot.inst.addChild(this._view);\r\n        this._canvas = this._view.getChild('canvas');\r\n        this._canvas.on(\"mousedown\", this, this.touchStart);\r\n        this._btnClear = this._view.getChild(\"n26\");\r\n        this._btnClear.onClick(this, this.canvasClear);\r\n        this._btnRecognize = this._view.getChild(\"n25\");\r\n        this._btnRecognize.onClick(this, this.recognize);\r\n        this._textResult = this._view.getChild('text_result');\r\n        this._textData = this._view.getChild('n10');\r\n        this._textName = this._view.getChild('name');\r\n        this._textGroup = this._view.getChild(\"text_group\").asTextField;\r\n        this._btnCopy = this._view.getChild(\"btn_copy\");\r\n        this._btnCopy.on(\"mousedown\", this, this.copyText);\r\n        this._btnAdd = this._view.getChild(\"btn_add\");\r\n        this._btnAdd.on(\"mousedown\", this, this.addText);\r\n        this._comboBox = this._view.getChild(\"type\").asComboBox;\r\n        this._comboBox.on(fairygui.Events.STATE_CHANGED, this, this.onComboBoxChanged);\r\n        this._view.getChild(\"n31\").onClick(this, this._clickWindowA);\r\n        this._view.getChild(\"n34\").onClick(this, this._clickWindowB);\r\n        this.onDataInit();\r\n        Laya.stage.on(Events.DATA_INIT, this, this.onDataInit);\r\n        Laya.stage.on(Events.PREVIEW_DATA, this, this.showCanvas);\r\n    }\r\n    onDataInit() {\r\n        let storage = JSON.parse(utils.getItem(\"group\"));\r\n        if (!storage || !storage.length) {\r\n            Laya.loader.load(\"res/config/points.json\", Laya.Handler.create(this, this.onDataLoaded));\r\n        }\r\n        else {\r\n            PointsManager.groupData = storage;\r\n            PointsManager.historyData = JSON.parse(utils.getItem(\"history\")) || [];\r\n            this.initComboBox();\r\n            this.initData(0);\r\n        }\r\n    }\r\n    onDataLoaded(res) {\r\n        PointsManager.groupData = res;\r\n        PointsManager.saveGroup();\r\n        this.initComboBox();\r\n        this.initData(0);\r\n    }\r\n    initComboBox() {\r\n        this._comboBox.items = [];\r\n        this._comboBox.values = [];\r\n        let items = [], values = [];\r\n        for (let i = 0; i < PointsManager.groupData.length; i++) {\r\n            items.push(PointsManager.groupData[i][\"name\"]);\r\n            values.push(i);\r\n        }\r\n        this._comboBox.items = items;\r\n        this._comboBox.values = values;\r\n    }\r\n    initData(index = 0) {\r\n        let points = PointsManager.groupData[index], data = points[\"data\"];\r\n        this._groupName = points[\"name\"];\r\n        this._textGroup.setVar(\"group\", this._groupName).flushVars();\r\n        PointsManager.recognizer.PointClouds = [];\r\n        for (let index = 0; index < data.length; index++) {\r\n            const element = data[index][\"points\"], label = data[index][\"label\"];\r\n            PointsManager.recognizer.PointClouds.push(new $Q.PointCloud(label, element));\r\n        }\r\n    }\r\n    onComboBoxChanged() {\r\n        this.initData(+this._comboBox.value);\r\n    }\r\n    touchStart(event) {\r\n        if (this.hasRecognize) {\r\n            this.hasRecognize = false;\r\n            this.canvasClear();\r\n        }\r\n        this._strokeColor = utils.roundColor();\r\n        this._strokeID++;\r\n        this._textData.text = \"\";\r\n        this._textResult.visible = false;\r\n        this.preX = event.target.mouseX;\r\n        this.preY = event.target.mouseY;\r\n        this.touchMoveable = true;\r\n        this._points.push(new $Q.Point(this.preX, this.preY, this._strokeID));\r\n        this._canvas.on(\"mousemove\", this, this.touchMove);\r\n        this._canvas.on(\"mouseup\", this, this.touchEnd);\r\n        this._view.on(\"mousemove\", this, this.checkTouchRect);\r\n    }\r\n    checkTouchRect(event) {\r\n        if (event.target == this._view.displayObject) {\r\n            this.touchMoveable = false;\r\n        }\r\n    }\r\n    touchMove(event) {\r\n        if (!this.touchMoveable) {\r\n            this._canvas.off(\"mousemove\", this, this.touchMove);\r\n            this._canvas.off(\"mouseup\", this, this.touchEnd);\r\n            return;\r\n        }\r\n        this.curX = event.target.mouseX;\r\n        this.curY = event.target.mouseY;\r\n        this._points.push(new $Q.Point(this.curX, this.curY, this._strokeID));\r\n        this._canvas.displayObject.graphics.drawLine(this.preX, this.preY, this.curX, this.curY, this._strokeColor, 2);\r\n        this.preX = event.target.mouseX;\r\n        this.preY = event.target.mouseY;\r\n    }\r\n    touchEnd(event) {\r\n        this._canvas.off(\"mousemove\", this, this.touchMove);\r\n        this._canvas.off(\"mouseup\", this, this.touchEnd);\r\n    }\r\n    canvasClear() {\r\n        this._textData.text = \"\";\r\n        this._textResult.visible = false;\r\n        this._strokeID = 0;\r\n        this._points = [];\r\n        this._canvas.displayObject.graphics.clear(false);\r\n        this._canvas.displayObject.graphics.drawRect(0, 0, this._canvas.width, this._canvas.height, \"#ffffff\");\r\n    }\r\n    recognize() {\r\n        this.hasRecognize = true;\r\n        this._textData.text = JSON.stringify(this._points).replace(/\"IntX\":0,\"IntY\":0,/g, \"\");\r\n        if (this._points.length >= 10) {\r\n            var result = PointsManager.recognizer.Recognize(this._points);\r\n            this._textResult.visible = true;\r\n            this._textResult.setVar(\"text\", result.Name).setVar(\"time\", result.Time + \"\").setVar(\"score\", utils.round(result.Score, 2) + \"\").flushVars();\r\n        }\r\n        else {\r\n            alert(\"你好像还没有画什么东西或者绘制的点太少啦！\");\r\n        }\r\n    }\r\n    copyText() {\r\n        utils.copyText(this._textData.text);\r\n    }\r\n    addText() {\r\n        if (this._points.length == 0) {\r\n            alert(\"请先绘制点东西吧~\");\r\n            return;\r\n        }\r\n        if (this._textName.text == \"\") {\r\n            alert(\"请为该数据命个名吧~\");\r\n            return;\r\n        }\r\n        PointsManager.historyData.push({ \"label\": this._textName.text, \"points\": this._points, \"timestamp\": new Date().toLocaleString(), \"uuid\": new Date().getTime() });\r\n        PointsManager.saveHistory();\r\n        PointsManager.recognizer.AddGesture(this._textName.text, this._points);\r\n        alert(\"添加成功！\");\r\n    }\r\n    _clickWindowA() {\r\n        if (this._winA == null) {\r\n            this._winA = new WindowHistory();\r\n            this._winA.modal = true;\r\n        }\r\n        if (this._winB)\r\n            this._winB.hide();\r\n        this._winA.show();\r\n    }\r\n    _clickWindowB() {\r\n        if (this._winB == null) {\r\n            this._winB = new WindowGroup();\r\n            this._winB.modal = true;\r\n        }\r\n        if (this._winA)\r\n            this._winA.hide();\r\n        this._winB.show();\r\n    }\r\n    showCanvas() {\r\n        if (this._canvasPanel == null) {\r\n            this._canvasPanel = new Canvas();\r\n            this._canvasPanel.modal = true;\r\n        }\r\n        this._canvasPanel.show();\r\n    }\r\n}\r\n",
  "references": [
    "E:/coding/layabox/Super-Quick-Recognizer/src/utils/utils.ts",
    "E:/coding/layabox/Super-Quick-Recognizer/src/views/windowHistory.ts",
    "E:/coding/layabox/Super-Quick-Recognizer/src/views/WindowGroup.ts",
    "E:/coding/layabox/Super-Quick-Recognizer/src/manager/PointsManager.ts",
    "E:/coding/layabox/Super-Quick-Recognizer/src/events/events.ts",
    "E:/coding/layabox/Super-Quick-Recognizer/src/views/Canvas.ts"
  ]
}
