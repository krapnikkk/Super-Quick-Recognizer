{
  "code": "export default class utils {\r\n    static round(n, d) {\r\n        d = Math.pow(10, d);\r\n        return Math.round(n * d) / d;\r\n    }\r\n    static rand(low, high) {\r\n        return Math.floor((high - low + 1) * Math.random()) + low;\r\n    }\r\n    static roundColor() {\r\n        return \"rgb(\" + utils.rand(0, 200) + \",\" + utils.rand(0, 200) + \",\" + utils.rand(0, 200) + \")\";\r\n    }\r\n    static copyText(text) {\r\n        if (text === \"\") {\r\n            alert(\"好像没有需要复制的内容哦！\");\r\n            return;\r\n        }\r\n        var oInput = document.querySelector('.oInput');\r\n        if (!oInput) {\r\n            oInput = document.createElement('input');\r\n            oInput.className = 'oInput';\r\n            document.body.appendChild(oInput);\r\n        }\r\n        oInput.style.display = 'block';\r\n        oInput.value = text;\r\n        oInput.select();\r\n        document.execCommand(\"Copy\");\r\n        oInput.style.display = 'none';\r\n        alert('内容已经复制到黏贴板啦');\r\n    }\r\n    static setItem(item, str) {\r\n        localStorage.setItem(item, str);\r\n    }\r\n    static getItem(item) {\r\n        return localStorage.getItem(item);\r\n    }\r\n    static spliceByKey(array, key, val) {\r\n        for (let index = 0; index < array.length; index++) {\r\n            const element = array[index];\r\n            if (element[key] && element[key] == val) {\r\n                array.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n    static spliceArrayByKey(array, attr, index, key, val) {\r\n        const item = array[index][attr];\r\n        for (let i = 0; i < item.length; i++) {\r\n            const element = item[i];\r\n            if (element[key] && element[key] == val) {\r\n                item.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    static findByKey(array, key, val) {\r\n        const result = [];\r\n        for (let index = 0; index < array.length; index++) {\r\n            const item = array[index];\r\n            if (item[key] && item[key] == val) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": []
}
